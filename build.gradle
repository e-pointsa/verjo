buildscript {
    ext {
        jooqVersion = "3.11.5"
        junitVersion = "5.3.1"
    }
}

plugins {
    id 'java'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
    id 'org.unbroken-dome.xjc' version '2.0.0'
    id 'pl.allegro.tech.build.axion-release' version '1.15.0'
}

group = "com.github.piorkowskiprzemyslaw"
version = scmVersion.version

repositories {
    mavenCentral()

    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

scmVersion {
    hooks {
        pre 'fileUpdate', [file: 'README.md', pattern: { v, c -> /verjo:$v/ }, replacement: { v, c -> "verjo:$v" }]
        pre 'commit'
    }
}

sourceCompatibility = 11
targetCompatibility = 11

dependencies {
    implementation "org.jooq:jooq-codegen:$jooqVersion"
    implementation "org.jvnet.jaxb2_commons:jaxb2-basics-runtime:1.11.1"

    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'

    xjcClasspath "org.jvnet.jaxb2_commons:jaxb2-basics:1.11.1"
    xjcClasspath "org.jvnet.jaxb2_commons:jaxb2-basics-annotate:1.0.4"
    xjcClasspath "org.jvnet.jaxb2_commons:jaxb2-fluent-api:3.0"
    xjcClasspath "org.jvnet.jaxb2_commons:jaxb2-commons-lang:2.4"

    testImplementation "com.google.jimfs:jimfs:1.2"
    testImplementation "org.assertj:assertj-core:3.11.1"
    testImplementation "javax.xml.bind:jaxb-api:2.3.0"
    testImplementation "com.sun.xml.bind:jaxb-core:2.3.0"
    testImplementation "com.sun.xml.bind:jaxb-impl:2.3.0"
    testImplementation "javax.activation:activation:1.1.1"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    systemProperty "com.sun.xml.bind.v2.bytecode.ClassTailor.noOptimize", true
}

jacoco {
    toolVersion = "0.8.2"
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = false
    }

    dependsOn test
}

wrapper {
    gradleVersion = "8.0.2"
    distributionType = Wrapper.DistributionType.ALL
}

xjc {
    sourceSets {
        main {
            xjcSchema.srcDir("src/main/resources/schema/2_3")
            xjcBinding.srcDir("src/main/resources/schema/2_3/bindings")
            xjcExtraArgs.addAll '-Xfluent-api', '-XtoString', '-Xequals', '-XhashCode', '-Xannotate'
        }
    }
}

xjcGenerate {
    outputDirectory = file("gen/java")
    targetPackage = "com.github.piorkowskiprzemyslaw.verjo.xsd"
}

clean {
    delete "gen"
}

java {
    withJavadocJar()
    withSourcesJar()
}

tasks.register('testJar', Jar) {
    from sourceSets.test.output
    archiveClassifier = 'tests'
}

publishing {
    publications {
        verjo(MavenPublication) {
            pom {
                name = 'VerJo'
                description = 'VerJo is an jOOQ plugin providing code generation from Vertabelo XML files.'
                url = 'https://github.com/piorkowskiprzemyslaw/verjo'
                inceptionYear = '2018'

                scm {
                    url = 'https://github.com/piorkowskiprzemyslaw/verjo'
                    connection = 'scm:https://github.com/piorkowskiprzemyslaw/verjo.git'
                    developerConnection = 'scm:git@github.com:piorkowskiprzemyslaw/verjo.git'
                }

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://raw.githubusercontent.com/piorkowskiprzemyslaw/verjo/master/LICENSE'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'piorkowskiprzemyslaw'
                        name = 'Przemysław Piórkowski'
                        email = 'piorkowskiprzemyslaw@gmail.com'
                    }
                }
            }

            artifact testJar
            from components.java
        }
    }

    repositories {
        maven {
            def repositoryUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            def snapshotRepositoryUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
            url = version.endsWith('SNAPSHOT') ? snapshotRepositoryUrl : repositoryUrl
            name = "Verjo"
        }
    }
}